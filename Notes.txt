ARRAYS AND STRINGS

1. Merge Sorted Array
    Keep two pointers, one at the start of the first array and the other at the start of second array. Also
    create a temperory vector. Now traverse both arrays comparing values at ith and jth index and pushing the
    lesser of two to the temp array. After traversing both arrays copy the contents of the temp array to 
    the first array.

    The better solution is to traverse from the end and compare the larger element first, then we do not need to
    create an auxillary array.

    Time Complexity: O(N + M)
    Space Complexity: O(1) (Most Optimal)

2. Remove Elements
    Take an extra pointer and initialize it to start of the array. Now traverse the array and if an element
    is encountered which is equal to the target value, skip that element otherwise copy the element to the
    location of the pointer index and increment pointer by one. Return the pointer value at the en dwhich 
    will denote the length of array.

    Time Complexity: O(N)

3. Remove Duplicates from sorted array
    Keep two pointers one at the beginning of the array(call it k) and one to traverse it. Traverse till the second last
    element and if current element is not equal to the next element, copy the current element to the k pointer index
    and increment that pointer by one. After exiting the loop, copy the last element to the location of k pointer
    and return (k+1) which is the new length of the array with no duplicates.

    Time Complexity: O(N)

4. Remove Duplicates from sorted array II
    Similar to the above question, keep 2 pointers but also keep a counter variable initialized with 1. If
    the current element is not equal to the next element check the value of count. If count is 1, copy just
    one value of current element to the k index and increase value of k by 1. Otherwise if count is greater
    than 1 copy the current element 2 times to the k and k+1 index and increase value of k by 2. Repeat the
    same thing for the last element once out of the array.

    Time Complexity: O(N)

5. Majority Element
    Create a frequency map of all elements. As the array is being traversed keep track of max frequency 
    encountered so far and the element which has that frequency. Return that element.

    The most optimal solution is to use boyer moore algorithm which works as follows. 
    Take two variables count and res. Traverse the array and if count is 0 set the current element to the number
    and increase the count by 1. Otherwise if the current element is equal to res increse count by 1 otherwise
    decrease count by 1. In the end res should contain the majority element.

    Time Complexity : O(n)

6. Rotate Array
    First do a modulus of k with size of array and that will be new normalized k value. Now reverse the entire
    array. Then reverse the first k elements. After that reverse the last n-k elements and that will be the
    solution.

    Time Complexity : O(n)

7. Best Time to buy and sell stock
    Create 2 pointers one initialized to the start of the array and denoting the minimum price at which we 
    can buy a stock. Another pointer to traverse the prices array. If the current price is lesser than the
    previous price at which stock was bought, shift the pointer to that index. And at every index check the
    profit generated and if that profit is greater than max profit, update the value of max profit.

    Time Complexity: O(n)

8. Best Time to buy and sell stock II
    Traverse the array and check 2 adjacent elements. If the difference of the next and previous is positive,
    add that difference to the total profit and return the total profit.

9. Jump Game
    Create a dp array of size n, set last index to true and start traversing from n-2 index. Here the objective is to 
    reach the 0th element. For each element for all possible jumps check if current index + jump lands on an index 
    which is not set to false. If it does, set it to true and break the current iteration. If all elements are false then
    it will also be false. Do this till you reach 0th index and check if 0th index is true or not. If its true then its
    possible otherwise not.

    Time Complexity: O(n^n)
    Space Complexity : O(n)

10 Jump Game II
    Now the objective is to not just reach the final index but calculate the minimum steps required to reach the final step.
    For Top Down solution the base case would be if current index exceeds the array size then return INT_MAX otherwise if 
    index lands on last index return 0. Now for every index first create an ans variable and initialise it with INT_MAX.
    Now check all possible jumps from 1 to value on current index and calulate the subproblem. If the subproblem does not
    retrurn INT_MAX, take min of ans and subproblem. After the loop ends check if ans is still INT_MAX and if it is, return
    INT_MAX otherwise return 1 + ans.

    For bottom up solution, create a dp array and set last index to 0, now the objective is to reach the 0th index. Start
    traversing from n-2 index to 0 and run an inner loop of jump = 1 to max jump. If the index does not land on INT_MAX
    and is smaller than size of array calculate the value where it lands, add one to it and take a minimum with current value.
    Keep repating until 0th index is reached and return the value stored at 0.

    Time Complexity: O(n^n)
    Space Complexity: O(n)

11 H Index

    The objective is to find papers that have been cites atleast H times and return the value of H. To do this we can use
    counting sort approach. Find the maximum value in the array and create a new array with size of maximum value. Now for
    each citation, add 1 from index 0 to the value of citatiion inside the auxillary array. Now traverse the auxillary array
    and for each index i check if array[i] is atleast i and if it is update the result to match i. The in the end return
    the value of result.

    Most optimal solution is to reverse sort the array and for every index check if i+1 is lesser than or equal to 
    citations[i] and if it is update the result as max(result, i+1) and return the result. 

    Time Complexity: O(n)
    Space Complexity: O(1)

12 Product of array except self

    Create a new array caaled prefix and calculate the prefix multiplication for each index. Now create a variable called op
    and initialise it with 1. Now start traversing from n-1 index and till 1 index and for each index i multiply prefix[i-1]
    with op and store it in preifx[i] and multiply op with nums[i]. After the loop ends replace preifx[0] with final value
    of output and return the prefix array.

    Time Complexity : O(n)
    Space Complexity : O(n)


13. Insert Delete GetRandom O(1)

    Create a unordered map and a vector and while inserting check if the element exists or not, if it does return false otherwise
    insert it to the end of array and add to the map. While removing check if element exists and if it does first swap it 
    with the last index of array then update the map, then remove it from array and then remove it from the map. Order must
    be like this otherwise some bad edge cases will occur.

    So The order must be:
        Swap in Array -> Update Map -> Delete from Array -> Delete from Map

    For random function just use { rand() % arr.size() } to generate random index.

    Time Complexity : O(1)
    Space Complexity : O(n)

14. Gas Station
    First compute total gas and total cost and if total gas is lesser than total cost completing the circuit will not be possible
    so return -1.

    Now create two variables total and index both initialized with 0. Traverse the array and compute total += gas[i] - cost[i]
    for each index i. Now if total becomes negative, reset total to 0 and index to i+1 as completing the circuit before that
    index will not be possible. After the end of loop return the index value.

    Time Complexity : O(n)
    Space Complexity : O(1)

15. Candy
    Create a vector of size n and initialise all indices with 1. This denotes the initial amount of candies each child has.

    Now do a left pass of the array starting from index 1 and if ratings[i] > ratings[i-1] then check if candies[i] > candies[i-1] + 1,
    and if not then update candies[i] with candies[i-1] + 1, and similarly do it for the right pass starting from n-2 index and
    check if ratings[i] > ratings[i+1] and also check if candies[i] > candies[i+1] + 1 and if not then candies[i] becomes candies[i+1] + 1.

    In the end sum up all the values and that will be the result.

    Time Complexity : O(n)
    Space Complexity : O(n)

16. Trapping Rainwater

    Create two new arrays called left and right of size n initialized with 0. For the left array check if the height is greater
    than one previous height and if it is then set the height as max of current height or height stored at left[i-1]. Similarly
    for right vector check if the current height value is greater than right[i+1] and if it is update it. Now tarverse the
    height array and the water trapped would be min(left[i], right[i]) - height[i]. Add up all the values and that will be the
    total water trapped.

    Time Complexity : O(n)
    Space Complexity : O(n)

17. Roman to Integer

    Store all characters inside a hash table then traverse the string. Check if s[i+1] is larger than s[i] and if it is then
    add to result s[i+1] - s[i] otherwise simply add value of s[i]. Also check if i+1 is lesser than n.

    Time Complexity : O(n)
    Space Complexity : O(1)

18. Integer to Roman

    Keep extracting the last element of the number and multiplying with the appropriate power. Check if number is half, lesser
    than half or more than half of the nearest greater power of 10. Add symbols accordingly using nested conditionals and for
    loops.

    Time Complexity : O(n) where n is the number of digits
    Space Complexity : O(1)

19. Length of Last Word

    Maintain a boolean variable to check if the last character is actually a space. Once all spaces at the end are depleted,
    start counting characters and set the variable to false, now if another space is encountered break the loop.

    Time Complexity : O(n)
    Space Complexity : O(1)

20. Longest Common Prefix

    Extract the first string and maintain a count and for each character compare with with the count character inside the
    rest of the strings, if there is a mismatch or count exceeds lenght of the string, break the loops and return the substring
    till the count length.

    Time Complexity : O(n * 2)
    Space Complexity : O(1)

21. Reverse words in string

    First tokenize the string using stringstream and ignore any empty string token while tokenizing. Once we have the tokens 
    reverse the array and join all the tokens with a space. Pop the last space and return the string.

    Time Complexity : O(n)
    Space Complexity : O(n)


22. Index of first occurence

    Simply use haystack.find(needle) in c++ which will return the index of the first occurence.




Two Pointers

1. Valid Palindrome

    Traverse the entire string, create an extra string and check if each character is either >= a and <= z or >= A and <= Z
    and attach them to the extra string after converting them to lowercase, now simply check if the new string is a palindrome.

    Time Complexity : O(n)
    Space Complexity : O(n)

2. Is Subsequence

    Traverse the larger string from back using a pointers, one at the end of the larger string and other at the end of smaller
    string, if the chracters match, decrease both pointers otherwise decrease only the larger one. Once one or both reach the
    -1 index check if the smaller pointer reached -1, if it did return true otherwise return false.

    Time Complexity : O(n + m)
    Space Complexity : O(1)

3. Two Sum II

    Keep 2 pointers one at 0 and other at the last element of index, check their sum, if sum is equal to target return i+1, j+1
    otherwise if sum is lesser than target decrease j else increase i.

    Time Complexity : O(n)
    Space Complexity : O(1)

4. Container with most water

    Keep 2 pointers on at beginning and one at the end. Calculate area and then check if its larger than max area so far, if
    it is update max area so far. Now if arr[i] < arr[j] do i++ otherwise do j-- because we need to move in the direction
    of heiger height.

    Time Complexity : O(n)
    Space Complexity : O(1)


5. Three Sum

    First sort the array. Run a for loop from i=0 to i=n-2 and initialize two pointers start and end at i+1 and n-1 respectively.
    If i > 0 and nums[i] == nums[i-1] skip this iteration as it will lead to duplicates. Now if sum of three pointers is 0, add
    the three values to a vector and push to output. Now move the start to a location lesser than end and value at start should
    not be equal to value at start-1 index. This is again done to avoid duplicates. If sum is < 0 increse start otherwise 
    decrease end. Keep doing so until all subarrays are filtered out.

    Time Complexity : O(n)
    Space Complexity : O(n)



Sliding Window

1. Minimum Size subarray sum
    The objective is to find a window with sum of elements greater than or equal to target which is also minimal. So create a
    sliding window with both i and j initialized to 0. Exapand the window until the sum is greater than or equal to target. If the sum
    is greater than or equal to the target, calculate the window size and check whether is minimum so far. Now reduce the window size
    from left until the sum becomes lesser than target. While removing elements keep track of minimum window so
    far. Once the window size becomes lesser than target, expand window again until it becomes gretar than or equal to the target.
    Keep doing so, if minimum window is still INT_MAX then return 0 otherwise return the window size.

    Time Complexity : O(n)
    Space Complexity : O(1)

2. Longest Substring without repeating characters

    Create a hash map, maintain a sliding window with two pointers i, j. Expand j and check whether the current character
    is present in hash map or not and whether the index of the character is greater than or equal to i. If it is set i to
    index stored in hash map + 1. Set the len variable as j-i. Now outside the condition, add the current character to the
    hash map with index as j and increse len by one (as this character hasn't been processed yet). Check if len is greater
    than max length found so far. If it is set max length to len and set start to i. The start denotes the start of current
    window which is being considered. Keep repeating so until the loop ends. The start will denote the start of the final
    window and max_len will denote its length.

    Time Complexity : O(n)
    Space Complexity : O(1)

3. Minimum window substring

    Create two frequency maps (vectors), one for string called FS and one for pattern called FP. First initilaize the
    vector for pattern. Now traverse the string, add the current character to the FS. Check if FP[ch] > 0 and FS[ch] <= FP[ch].
    If these conditions match increase the count variable. Once the count is equal to the length of pattern, start decreasing
    the size of window from left. To do so check if FP[s[start]] == 0 or FS[s[start]] > FP[s[start]] that means either the
    character at the beginning of window is not present in pattern or its more than needed. Shrink the window by increasing start
    and removing from FS map. Once the while loop ends, check the current window size, compare with minimum so far and update
    the variable win_start which denotes the start of current window in question. Keep doing so for the entire string. In the
    end if min_len is still INT_MAX return an empty string otherwise return substring from win_start to max_len.

    Time Complexity : O(n)
    Space Complexity : O(1)

Matrix
    1. Valid Sudoku

        Traverse the 2D matrix and for every filled cell check if it is invalid i.e. its corresponding row or column or 3X3
        submatrix already has the same digit except itself of course. 

        Time Complexity : O(n ^ 3)
        Space Complexity : O(1)

    2. Spiral Order

        Define four variables sc = 0, sr = 0, er = n-1 and ec = m-1. Traverse the entire array boundarywise inside a while
        loop gradually decreasing the size of the boundaries. First traverse the first row from sc to ec then the last column
        from sc+1 to ec then the last row from ec-1 to sc then the first column from er-1 to sr+1. Then increse sr and sc by 1
        and decrease er and ec by one. Repeat while sr <= er and sc <= ec. In the last two inner for loops if sr becomes equal
        to er or sc = ec break from the loop as we do not want to print values twice.

        Time Complexity : O(n ^ 2)
        Space Complexity : O(1)

    3. Rotate Image

       First find the transpose of the array. Run a double for loop and if i > j replace matrix[i][j] and matrix[j][i]. Then
       do a columnwise swapping. Run a nested loop but restrict the inner loop from 0 to n / 2. Swap matrix[i][j] with 
       matrix[i][n-1-j].

       Time Complexity : O(n^2)

    4. Set Zeroes

        Make a vactor of pairs and traverse the array and store the indices of all cells which have a zero inside the vector.
        Now traverse the array and for each cell set the corresponding row and column to 0. 

        Time Complexity : O(n^2)

    5. Game of Life

        To do the problem in place first construct a truth table

        I F V
        0 0 0
        1 0 1
        0 1 2
        1 1 3

        This table denotes what value to assign to the matrix dependant on initial and final state. Follow the rules of game
        of life and assign a new value to every cell. Then traverse the matrix again and normalize the values again to either
        0 or 1 depending on the truth table.


Backtracking 

    1. Letter Combinations of Phone Number

        First map the index to the corresponding string in the keypad using a vector. Write a recursive function which takes
        in the input string, the vector and index initialized to 0 and also an empty string as arguments. Now extract each 
        index from the string and get the corresponding string on the keypad. Now add every character of that string to the
        formed string and find the combinations for the rest of the input by increasing index by one for subsequent recursive
        calls. When index is equal to the input string size that is the base case and output the string there.

        Time Complexity : O(3 ^ n) On Average
        Space Complexity : O(n)

    2. Combinations 

        This is just the regular finding subsets problem with a constraint that subset size should be of length k. So in the base
        case just add the subset whose size is k to the output vector.

        Time Complexity : O(2 ^ n)
        Space Complexity : O(n)

    3. Permutations

        Create a recursive function with the vector, and index initialized to 0 as argument. In the recursive case run a for
        loop with iterator j from i to array size and swap i and j. Once swapped find the permutations for the rest of the array
        by calling the function again with i+1. Then once the recursive call returns swap i and j again. In the base case if i
        reaches the last index of the array, add the array to the output vector.

        Time Complexity : O(n^2)
        Space Complexity : O(n)

    4. Combination Sum

        This is slightly tricky question. The objective is to return all combinations which add up to a given target number.
        An element can be included infinite number of times. So create a recursive function with the array, an index initialized
        to 0 and the target element. Now there will be 2 cases, either the current element can be included in the combination
        i.e. target - nums[i] >= 0 or it can't be. In the first case include it in the current combination and decrease the target
        element by nums[i] and again find the combinations for the rest of the input without increasing i. After that remove the 
        current element from the combination and find the rest of the combinations and this time increase index i by 1. In the second
        case simply exclude the current character and find combinations for the rest of the input, increase index by 1 this time.

        Time Complexity : O(2 ^ n)
        Space Complexity : O(n)

    5. N-Queens II

        Count the total possible configurations of board. Simple n queens problem with ways varible initialized to 0 in every
        recursive call. Check for each column per row, if queen can be placed, place it and find the rest of the possibilities
        and add them all to ways. Then reset the position by placing 0 on the board. At the end of the loop return ways.

        Time Complexity : O(n ^ n)
        Space Complexity :O(n)

    6. Generate Parentheses

        Create a recursive function with n, open_count and close_count and a string which is empty in the beginning. In the
        recursive case there will be two cases when open_count is smaller than n and close_count is smaller than open_count.
        In the first case, add an opening bracket to the string and increase open_count by 1. In the second case add a closing
        bracket to the string and increase close_count by 1. In the base case if open_count + close_count is equal to 2 * n 
        print the output string and return.

        Time Complexity : O(2 ^ n)
        Space Complexity : O(n)

    7. Word Search

        Traverse the 2D array and find a character which matches the first character of the word. Once found run a DFS routine
        with the visited array to find the rest of the word. If found simplyt return true, otherwise check  for the rest of the
        array. If not found in any case return false.

        Time Complexity : O(n*n*w) where w is the word length
        Space Complexity : O(w)

Divide and Conquer

    1. Sorted array to BST



Binary Search 

1. Search Insert Position

    Run a standard binary search with an extra variable called res. If target is found at mid simply return target else if
    mid is smaller than target store the index of mid in res otherwise just standard binary search subroutine. If target is
    not found then return res+1 as that will be the correct position for target to be inserted in.

    Time Complexity : O(logn)
    Space Complexity : O(1)

2. Search a 2D matrix

    Initialize i at 0 and j at m-1 where n are rows and m are columns in matrix. Now do a staircase search i.e. if current
    cell is equal to target return true, otherwise if target is smaller than current cell move left otherwise move down. If
    out of matrix return false.

    Time Complexity : O(n + m)
    Space Complexity : O(1)

3. Peak element

    Run a standard binary search routine. First check whether the mid is > 0 and element at mid - 1 is greater than element
    at mid. If it is, put e = mid - 1, now check if mid is smaller tha  n-1 and element at mid + 1 is greater than element 
    at mid. If it is put s = mid + 1, if none of these are true simply return mid.

    Time Complexity : O(logn)
    Space Complexity : O(1)

4. Search In Rotated Sorted Array

    This will require some modification of standard binary search. Run the outer while loop and check if mid is equal to target.
    If it is return mid index. Now check if nums[start] <= nums[mid] which means we are in the first array. Now check if target 
    is smaller than nums[mid] and target is greater than nums[start]. If it is search in the left search space otheriwse search 
    in the right search space. In the else condition, check if target <= nums[end] and target >= nums[mid]. If it is, search in
    the right search space otherwise search in the left search space.

    Time Complexity : O(logn)
    Space Complexity : O(1)

5. First and Last position of element in sorted Array

    Find the lower bound of the element first, run a standard binary search routine and everytime the target is encountered
    update the res value to the target index and then search in the left search space. Similarly find the upper bound by
    searching in the right search space. Now return both the indices in an array.

    Time Complexity : O(logn)
    Space Complexity : O(1)

6. Find Minimum in rotated sorted array

    Run a standard binary search routine. Now check if the search space is already sorted i.e. nums[s] < nums[e], if it is
    update res to minimum of nums[s] and res and break the loop. Otherwise caluclate the mid and update the res to minimum of
    res and nums[mid]. Now check if mid lies on  the left portion of the rotated array or right portion. This can be checked as
    follows if(nums[s] <= nums[m]) then left portion, so check in right portion i.e s = mid + 1 otherwise e = mid - 1. Return res
    in the end.

    Time Complexity : O(logn)
    Space Complexity : O(1)




